

Recovering Residual Stress - Short Term TODO:



Simulating Material Removal - Short Term TODO:

1) Test hypothesis r.e. reasons for geometry reconstruction. Main observation 
      right now is that, when a part is meshed and some regions of it are very
      fine, this causes geometric reconstruction issues for the next simulation.
      Current hypothesis is that, regions of very fine meshing, the nodes of the
      mesh may be displaced in a way that makes it difficult or impossible to
      construct planar faces.

2) Add C++ support for defining some simple stress profiles.
   As part of this, account for the case when the user specifies a stress profile
      which is far from equilbirium. 

3) Create a small library of examples illustrating current functionality.

4) If the user supplies their own estimated residual stress profile, it's necessary
      to allow the part, embued by this stress field which may not be in equilibirum, 
      to deform to achieve mechanical equilibrium. This is necessary only in the case
      when the user supplies an estimated stress profile.



General - Short Term TODO:

1) The add_user_subroutine() function currently doesn't do anything due to the
       (potential bug) in Abaqus 2024 which causes the .o files produced by 
       "abaqus make" to be useless.
   This means that recording an estimated stress profile via record_estimated_stress
       _profile() will not do anything.

2) Rule out and write up alternative technique for material removal using the
       additive manufacturing stuff in Abaqus.

3) Update the README and add a diagram documenting the metadata / naming data
       flow.

4) Add functionality to save execution state upon an excpetion and some functionality
       to resume from that state. This will be time-saving debug feature.



General - Long Term TODO:

Code Organization / Structure TODO:

    *** MINGLING STRESS EQUILIBRATION AND MACHINING PROCEDURES ***
    It also feels brittle to intermingle the stress equilibration and the machining
      procedures. That is, material removal is really unrelated to a sometimes
      necessary stress equilibration step. Stress equilibration is sometimes necessary
      because the way that a stress field is represented doesn't exactly match
      reality. Material removal is a fundamental procedure which is required during
      the machining process.

    *** OPENING AND CLOSING MDB ***
    Use cleaner technique to deal with opening and closing an mdb. Figure out how to
      deal with exceptional conditions when an MDB is open and needs to be closed.
      Using a "with" statement might be very useful to do this.

    *** ISOLATION OF CALLS INTO ABAQUS API ***
    I've decided that all calls into the Abaqus API should be located in the
      abaqus_shim.py file. However, many of these functions return Abaqus-native
      objects, which are passed around in functions outside of abaqus_shim.py. Is
      this clean? Is the restriction of making Abaqus API calls in abaqus_shim.py
      really necessary?
        Solution: Eliminate the simple getter functions? 

    *** TUPLES VS. LISTS ***
    Tuples should be passed as arguments when the function will not need to modify.
      Passing a list to a function is dangerous because the function may modify the
      list.


Adding/Modifying Features TODO:

    *** TOOL PATH AND PART GEOMETRY DONT INTERSECT ***
    Deal with possibility that a tool path doesn't intersect the part geometry. If this
      is the case, the PartFromBooleanCut() method will throw an exception.

    *** MESHING ROBUSTNESS ***
    Make meshing more robust. Currently we just try some parameters (seed density,
      mesh shape, etc.) and if those parameters don't work we try some other
      parameters.
    Use a bounding splien based on the tool pass geometry instead of a bounding
       box. One potential approach is to trace the centroid of the tool along
       the spline, then simply using a larger radius for the bounding spline will 
       do the trick.    

    *** MAPPING ORPHAN MESH TO GEOEMTRY ***
    There is an awful lot of runtime spent mapping an orphan mesh to a new geometry.
      If we could instead chain simulations together within a single model, this could
      be avoided. To do this, it's necessary to somehow delete part regions/elements
      which live a prespecified locations in space across different steps in a simulation.
      For example, in step 1 we would want the elements that live in a particular
      region of space to be deactivated, some deformation would occur, in step 2 we 
      would want the elements that live in some other region of space to be deactivated,
      etc. 
    Potential element deletion techniques: 
        1) Contact interaction / damage model. 
        2) Simulation restart with new model change.
        3) Abaqus' Additive Manufacturing Process Simulation toolset (See Analysis 
           > Analysis Techniques > Additive Manufacturing Process Simulation, also 
           see User Subroutines > Toolpath-Mesh Intersection Utility Routines, and 
           see Analysis > Analysis Techniques > Special Purpose Techniques > Progressive 
           Element Activation. The most promising approach embedded in all of this 
           is to use Progressive Element Activation to do element DEactivation at 
           across multiple steps. We could define all elements in an initial mesh 
           as eligible for element deactivation and then, in the user subroutine 
           UEPACTIVATIONVOL, find all the elements in a particular tool path (this 
           might involve querying all elements), and setting their material volume
           fractions to 0). 
        4) Approximating element removal by making the element elasticity modulus 
           very small (this was Jan's suggestion, it doesn't fully make sense to me).
    Also might be possible to speed things up by using my current approach but
      doing things outside of Abaqus.

    *** VERTEX-BASED BOUNDARY CONDITIONS ***
    Add vertex-based boundary conditions.

    *** IMPROVING FACE PARTITIONING ROBUSTNESS ***
    Make the partition_face() function more robust. In particular, the find_face_ngon_lives_on()
       assumes that the user doesn't make some mistake and specify an ngon that
       doesn't actually live on any face!

    *** SUPPORTING USER DEFINED PARTS ***
    Support user-defined parts. These part geometries will come from in-machine scans.

    *** SUPPORTING REAL-LIFE MEASUREMENT DATA ***
    Add support for real-life measurement data.

    *** ACCOUNTING FOR STRESS PROFILES NOT IN EQUILBIRIUM ***
    Account for case when user-specified stress profile is far from equilibrium.
       This necessitates adding a simulation to find equilibrium. Probably requires
       updating list of assumptions.

    *** WORKAROUND FOR INTERACTIVE MODE ***
    Figure out a workaround so we don't have to run Abaqus in interactive mode.

    *** SUPPORTING QUADRATIC SPLINES ***
    Can we support quadratic splines for toolpaths? 

    *** SUPPORTING ALTERNATIVE TOOL PASS ORIENTATIONS AND VARIETIES ***
    Can we support non-canonical tool pass orientations? 
    Can we support non-planar tool passes? Do we even want to?

    *** VIRTUAL TOPOLOGY ASSUMPTIONS ***
    If we allow a virtual topology to be created that causes faces to be merged,
       does this cause us to lose the geometric fidelity? How does the underlying
       representation of the part change when we do this?
