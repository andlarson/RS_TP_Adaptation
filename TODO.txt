
Reading TODO:

Look at paper "Influence of the machining sequence on the residual stress
     redistribution and machining quality: analysis and improvement using
     numerical simulations". And look at "Effects of cut depth on the
     redistribution of residual stress and deformation during the milling
     of thin-walled part."

Read about the 3 techniques cited in the "Prediction of Resisudal Stresses in
    Components Using the Contour Methdo" for doing point cloud to surface mesh
    conversion. Also, look at the PyCM automation claims.

Look at papers which cite and are cited by "Modeling of machining distortion 
    for thin-walled components based on the internal stress field evolution".

Look at papers cited in "Distortion caused by residual stresses in machining
    aeronautical aluminum alloy parts: recent advances".

Look at papers which cite "An industrial workflow to minimize part distortion
    for machining of large monolithic components in aerospace industry".

Re-check list of papers cited by 1st version of proposal and look through
    list of papers cited by newer version of proposal.


Recovering Residual Stress - Short Term TODO:

1) Get symmetric difference-based gradient descent up and running.

2) Fix the traction vector application routine so that it is capable of applying
       traction to many faces which may exist on a trench. 



Simulating Material Removal - Short Term TODO:

1) Add C++ support for defining some simple stress profiles.
   As part of this, account for the case when the user specifies a stress profile
      which is far from equilibrium. 



General - Short Term TODO:

0) Use Abaqus' solver only. Don't use Abaqus' preprocessor at all!

1) Implement checkpointing to save time debugging.

2) Write general testing framework for whole system. It should generate, or
       source, random blank geometries, random tool pass geometries, and random
       full-field stress estimates. Using these things, a whole flow can be
       simulated.



General - Long Term TODO:

Code Organization / Structure / Documentation TODO:

    *** MINGLING STRESS EQUILIBRATION AND MACHINING PROCEDURES ***
    It also feels brittle to intermingle the stress equilibration and the machining
      procedures. That is, material removal is really unrelated to a sometimes
      necessary stress equilibration step. Stress equilibration is sometimes necessary
      because the way that a stress field is represented doesn't exactly match
      reality. Material removal is a fundamental procedure which is required during
      the machining process.

    *** OPENING AND CLOSING MDB ***
    Use cleaner technique to deal with opening and closing an mdb. Figure out how to
      deal with exceptional conditions when an MDB is open and needs to be closed.
      Using a "with" statement might be very useful to do this.

    *** WRITE UP ALTERANTIVE TECHNIQUE FOR MATERIAL REMOVAL ***
    Rule out and write up alternative technique for material removal using the
        additive manufacturing stuff in Abaqus.
    
    *** DOCUMENTATION UPDATE ***
    Update the README and add a diagram documenting the metadata / naming data
        flow.
    Also, add diagram documenting the possible all in simulation flow vs. in real
        life flow.
    
    *** MYPY ISSUE WITH NONE ***
    Fix the mypy " | None" issue that is causing it to generate lots of false-
        positives.

    *** CONSISTENT USE OF EXCEPTIONS VS ASSERTIONS ***
    The codebase is currently inconsistent in its use of exceptions vs assertions.
        I currently think that an exception should be raised when an exceptional
        circumstance, outside of the control of the executing program, occurs and
        can be recovered from. An assert should be used to detect a programming 
        error. Note that asserts can be removed at runtime. The tricky thing is
        that, if the library caller makes a programming error, I think the library
        should raise an exception??


Adding/Modifying Features TODO:

    *** TOOL PATH AND PART GEOMETRY DONT INTERSECT ***
    Deal with possibility that a tool path doesn't intersect the part geometry. If this
      is the case, the PartFromBooleanCut() method will throw an exception.

    *** MAPPING ORPHAN MESH TO GEOEMTRY ***
    There is an awful lot of runtime spent mapping an orphan mesh to a new geometry.
      If we could instead chain simulations together within a single model, this could
      be avoided. To do this, it's necessary to somehow delete part regions/elements
      which live a prespecified locations in space across different steps in a simulation.
      For example, in step 1 we would want the elements that live in a particular
      region of space to be deactivated, some deformation would occur, in step 2 we 
      would want the elements that live in some other region of space to be deactivated,
      etc. 
    Potential element deletion techniques: 
        1) Contact interaction / damage model. 
        2) Simulation restart with new model change.
        3) Abaqus' Additive Manufacturing Process Simulation toolset (See Analysis 
           > Analysis Techniques > Additive Manufacturing Process Simulation, also 
           see User Subroutines > Toolpath-Mesh Intersection Utility Routines, and 
           see Analysis > Analysis Techniques > Special Purpose Techniques > Progressive 
           Element Activation. The most promising approach embedded in all of this 
           is to use Progressive Element Activation to do element DEactivation at 
           across multiple steps. We could define all elements in an initial mesh 
           as eligible for element deactivation and then, in the user subroutine 
           UEPACTIVATIONVOL, find all the elements in a particular tool path (this 
           might involve querying all elements), and setting their material volume
           fractions to 0). 
        4) Approximating element removal by making the element elasticity modulus 
           very small (this was Jan's suggestion, it doesn't fully make sense to me).
    Also might be possible to speed things up by using my current approach but
      doing things outside of Abaqus.

    *** IMPROVING FACE PARTITIONING ROBUSTNESS ***
    Make the partition_face() function more robust. In particular, the find_face_ngon_lives_on()
       assumes that the user doesn't make some mistake and specify an ngon that
       doesn't actually live on any face! This needs to be done to make surface
       boundary conditions more robust.

    *** WORKAROUND FOR INTERACTIVE MODE ***
    Figure out a workaround so we don't have to run Abaqus in interactive mode.

    *** SUPPORTING QUADRATIC SPLINES ***
    Can we support quadratic splines for toolpaths? 

    *** SUPPORTING ALTERNATIVE TOOL PASS ORIENTATIONS AND VARIETIES ***
    Can we support non-canonical tool pass orientations? 
    Can we support non-planar tool passes? Do we even want to?

    *** VIRTUAL TOPOLOGY ASSUMPTIONS ***
    If we allow a virtual topology to be created that causes faces to be merged,
       does this cause us to lose the geometric fidelity? How does the underlying
       representation of the part change when we do this?
